#!/usr/bin/env bash

help() {
  echo "validate_odim_h5 is a script to strictly validate your"
  echo "odim hdf5 files vs the specification's different versions."
  echo "it consists of a simple python script that maps the h5file to json (in it's metadata form)"
  echo "and cue files for describing and vetting the metadata"
  echo
  echo "dependencies: cue 0.4+, python 3.8+, jq 1.6, bash 4.4"
  echo
  echo "usage:"
  echo "    validate_odim_h5 [-as <spec-vers>] [-single-site|-S] [-mixed-polarization|-M] <file> [-- <ignore-keys>]"
  echo
  echo "  spec-vers:                  ODIM Version to validate against fx. V2_0"
  echo "  ignore-keys:                list of attribute keys to ignore"
  echo "  -single-site|-S:            validate as a single-site hdf5 file"
  echo "  -mixed-polarization|-M:     allow mixed polarization in how-attributes"
  exit 2
}

vFromConventions() {
  version="$1"
  override="$2"
  version="${version##*/}"   # cut prefix(es) before /
  version="${override:-$version}"

  echo "$version"
}

dotVersionText() {
  tmpV="${1/_/.}"    # replace '_' with '.'
  echo "${tmpV#V}"   # Remove prefixed 'V'
}

err() {
  echo "$1" >&2
  exit 1
}

[[ "${#@}" -lt 1 || $* = *'--help'* ]] && help >&2

cue_param=""
while (( $# )) ; do
  case "$1" in
  -as|--as)
    as="$2"
    shift 2
    ;;
  -single-site|--single-site|-S)
    cue_param="$cue_param"' -t single_site=true'
    shift
    ;;
  -mixed-polarization|--mixed-polarization|-M)
    cue_param="$cue_param"' -t mixed_polarization=true'
    shift
    ;;
  --)
    help >&2  # this shouldn't be reachable
    ;;
  *)
    file="$1"
    shift
    break
    ;;
  esac
done
file="${file:?no file given to validate}"
if ! [[ -f "$file" ]]; then
  echo "invalid file" >&2
  exit 1
fi
f="$(mktemp)"

if ! python3 ./hdf5_json.py "$file" "$@" > "$f"; then
  err "error running python command"
fi

if ! version="$(vFromConventions "$(jq --raw-output '.Conventions' "$f")" "$as")"; then
  err "the version to be validated against can't be determined (via Conventions-tag), supply one using: [-as <ODIM Version to validate against fx. V2_0>]" >&2
fi

dotVersion="$(dotVersionText "$version")"

cue_param="-t version=$version $cue_param"
#Inject version into the file
replacement=".Conventions = \"ODIM_H5/$version\" | .what.version = \"H5rad $dotVersion\""
if jq "$replacement" "$f" >| test.json; then
  # shellcheck disable=SC2086  # double quoting messes things up
  cue vet --ignore test.json ./*.cue $cue_param
else
  err "could not replace version texts" >&2
fi